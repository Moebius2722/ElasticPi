#!/bin/sh
#
# /etc/init.d/kibana -- startup script for Kibana
#
# Written by Miquel van Smoorenburg <miquels@cistron.nl>.
# Modified for Debian GNU/Linux	by Ian Murdock <imurdock@gnu.ai.mit.edu>.
# Modified for Tomcat by Stefan Gybas <sgybas@debian.org>.
# Modified for Tomcat6 by Thierry Carrez <thierry.carrez@ubuntu.com>.
# Additional improvements by Jason Brittain <jason.brittain@mulesoft.com>.
# Modified by Nicolas Huray for Elasticsearch <nicolas.huray@gmail.com>.
#
### BEGIN INIT INFO
# Provides:          kibana
# Required-Start:    $network $remote_fs $named
# Required-Stop:     $network $remote_fs $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts kibana
# Description:       Starts kibana using start-stop-daemon
### END INIT INFO

PATH=/bin:/usr/bin:/sbin:/usr/sbin
NAME=kibana
DESC="Kibana Server"
DEFAULT=/etc/default/$NAME

if [ `id -u` -ne 0 ]; then
	echo "You need root privileges to run this script"
	exit 1
fi


. /lib/lsb/init-functions

if [ -r /etc/default/rcS ]; then
	. /etc/default/rcS
fi


# The following variables can be overwritten in $DEFAULT

# Run Kibana as this user ID and group ID
K_USER=$NAME
K_GROUP=$NAME

# Directory where the Kibana binary distribution resides
K_HOME=/opt/$NAME


# NodeJS Maximum Memory Used
#MAX_OLD_SPACE_SIZE=
MAX_OLD_SPACE_SIZE=100

# Additional NodeJS OPTS
#NODE_OPTIONS=


# Usage: serve [options]
#
#  Run the kibana server
#
#  Options:
#
#    -h, --help                 output usage information
#    -e, --elasticsearch <uri>  Elasticsearch instance
#    -c, --config <path>        Path to the config file, can be changed with the CONFIG_PATH environment variable as well
#    -p, --port <port>          The port to bind to
#    -q, --quiet                Prevent all logging except errors
#    -Q, --silent               Prevent all logging
#    --verbose                  Turns on verbose logging
#    -H, --host <host>          The host to bind to
#    -l, --log-file <path>      The file to log to
#    --plugin-dir <path>        A path to scan for plugins, this can be specified multiple times to specify multiple directories
#    --plugin-path <path>       A path to a plugin which should be included by the server, this can be specified multiple times to specify multiple paths
#    --plugins <path>           an alias for --plugin-dir

# Kibana log directory
LOG_DIR=/var/log/$NAME

# Kibana log file
LOG_FILE=$LOG_DIR/$NAME.log

# Kibana plugin directory
#PLUGIN_DIR=

# Kibana plugin path
#PLUGIN_PATH

# Kibana configuration file
CONF_FILE=$K_HOME/config/$NAME.yml

# Elasticsearch URI
#ELASTICSEARCH_URI=

# Kibana Host
#K_HOST=

# Kibana Port
#K_PORT=

# Log Level :
# 	QUIET   => Just Errors
#	SILENT  => None
#	VERBOSE => All Logs
#LOG_LEVEL=QUIET

# Kibana PID file directory
PID_DIR=/var/run/$NAME

# End of variables that can be overwritten in $DEFAULT

# overwrite settings from default file
if [ -f "$DEFAULT" ]; then
	. "$DEFAULT"
fi

# Define other required variables
PID_FILE="$PID_DIR/$NAME.pid"
DAEMON=$K_HOME/bin/$NAME
DAEMON_OPTS="serve -c $CONF_FILE -l $LOG_FILE"

export MAX_OLD_SPACE_SIZE
export NODE_OPTIONS

# Check DAEMON exists
test -x $DAEMON || exit 0

case "$1" in
  start)
	log_daemon_msg "Starting $DESC"

	pid=`pidofproc -p $PID_FILE $NAME`
	if [ -n "$pid" ] ; then
		log_begin_msg "Already running."
		log_end_msg 0
		exit 0
	fi

	# Prepare environment
	mkdir -p "$LOG_DIR" && chown "$K_USER":"$K_GROUP" "$LOG_DIR"

	# Ensure that the PID_DIR exists (it is cleaned at OS startup time)
	if [ -n "$PID_DIR" ] && [ ! -e "$PID_DIR" ]; then
		mkdir -p "$PID_DIR" && chown "$K_USER":"$K_GROUP" "$PID_DIR"
	fi
	if [ -n "$PID_FILE" ] && [ ! -e "$PID_FILE" ]; then
		touch "$PID_FILE" && chown "$K_USER":"$K_GROUP" "$PID_FILE"
	fi

	# Start Daemon
	start-stop-daemon -d $K_HOME --start -b --user "$K_USER" -c "$K_USER" --pidfile "$PID_FILE" --exec $DAEMON -- $DAEMON_OPTS
	return=$?
	if [ $return -eq 0 ]; then
		i=0
		timeout=10
		# Wait for the process to be properly started before exiting
		until { cat "$PID_FILE" | xargs kill -0; } >/dev/null 2>&1
		do
			sleep 1
			i=$(($i + 1))
			if [ $i -gt $timeout ]; then
				log_end_msg 1
				exit 1
			fi
		done
	fi
	log_end_msg $return
	exit $return
	;;
  stop)
	log_daemon_msg "Stopping $DESC"

	if [ -f "$PID_FILE" ]; then
		start-stop-daemon --stop --pidfile "$PID_FILE" \
			--user "$K_USER" \
			--quiet \
			--retry forever/TERM/20 > /dev/null
		if [ $? -eq 1 ]; then
			log_progress_msg "$DESC is not running but pid file exists, cleaning up"
		elif [ $? -eq 3 ]; then
			PID="`cat $PID_FILE`"
			log_failure_msg "Failed to stop $DESC (pid $PID)"
			exit 1
		fi
		rm -f "$PID_FILE"
	else
		log_progress_msg "(not running)"
	fi
	log_end_msg 0
	;;
  status)
	status_of_proc -p $PID_FILE $NAME $NAME && exit 0 || exit $?
	;;
  restart|force-reload)
	if [ -f "$PID_FILE" ]; then
		$0 stop
		sleep 1
	fi
	$0 start
	;;
  *)
	log_success_msg "Usage: $0 {start|stop|restart|force-reload|status}"
	exit 1
	;;
esac

exit 0
